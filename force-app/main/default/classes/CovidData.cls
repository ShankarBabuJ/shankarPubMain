//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class CovidData {

	public class Unofficial_summary {
		@AuraEnabled
		public String source {get;set;} 
		@AuraEnabled
		public Integer total {get;set;} 
		@AuraEnabled
		public Integer recovered {get;set;} 
		@AuraEnabled
		public Integer deaths {get;set;}
		@AuraEnabled 
		public Integer active {get;set;} 

		public Unofficial_summary(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'source') {
							source = parser.getText();
						} else if (text == 'total') {
							total = parser.getIntegerValue();
						} else if (text == 'recovered') {
							recovered = parser.getIntegerValue();
						} else if (text == 'deaths') {
							deaths = parser.getIntegerValue();
						} else if (text == 'active') {
							active = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Unofficial_summary consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	@AuraEnabled
	public Boolean success {get;set;} 
	@AuraEnabled
	public Data data {get;set;} 
	@AuraEnabled
	public String lastRefreshed {get;set;} 
	@AuraEnabled
	public String lastOriginUpdate {get;set;} 

	public CovidData(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'success') {
						success = parser.getBooleanValue();
					} else if (text == 'data') {
						data = new Data(parser);
					} else if (text == 'lastRefreshed') {
						lastRefreshed = parser.getText();
					} else if (text == 'lastOriginUpdate') {
						lastOriginUpdate = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'CovidData consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Summary {
		@AuraEnabled
		public Integer total {get;set;}
		@AuraEnabled 
		public Integer confirmedCasesIndian {get;set;} 
		@AuraEnabled
		public Integer confirmedCasesForeign {get;set;} 
		@AuraEnabled
		public Integer discharged {get;set;} 
		@AuraEnabled
		public Integer deaths {get;set;} 
		@AuraEnabled
		public Integer confirmedButLocationUnidentified {get;set;} 

		public Summary(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'total') {
							total = parser.getIntegerValue();
						} else if (text == 'confirmedCasesIndian') {
							confirmedCasesIndian = parser.getIntegerValue();
						} else if (text == 'confirmedCasesForeign') {
							confirmedCasesForeign = parser.getIntegerValue();
						} else if (text == 'discharged') {
							discharged = parser.getIntegerValue();
						} else if (text == 'deaths') {
							deaths = parser.getIntegerValue();
						} else if (text == 'confirmedButLocationUnidentified') {
							confirmedButLocationUnidentified = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Summary consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		@AuraEnabled
		public Summary summary {get;set;} 
		@AuraEnabled
		public List<Unofficial_summary> unofficial_summary {get;set;} // in json: unofficial-summary
		@AuraEnabled
		public List<Regional> regional {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = new Summary(parser);
						} else if (text == 'unofficial-summary') {
							unofficial_summary = arrayOfUnofficial_summary(parser);
						} else if (text == 'regional') {
							regional = arrayOfRegional(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Regional {
		@AuraEnabled
		public String loc {get;set;} 
		@AuraEnabled
		public Integer confirmedCasesIndian {get;set;} 
		@AuraEnabled
		public Integer confirmedCasesForeign {get;set;} 
		@AuraEnabled
		public Integer discharged {get;set;} 
		@AuraEnabled
		public Integer deaths {get;set;} 
		@AuraEnabled
		public Integer totalConfirmed {get;set;} 

		public Regional(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'loc') {
							loc = parser.getText();
						} else if (text == 'confirmedCasesIndian') {
							confirmedCasesIndian = parser.getIntegerValue();
						} else if (text == 'confirmedCasesForeign') {
							confirmedCasesForeign = parser.getIntegerValue();
						} else if (text == 'discharged') {
							discharged = parser.getIntegerValue();
						} else if (text == 'deaths') {
							deaths = parser.getIntegerValue();
						} else if (text == 'totalConfirmed') {
							totalConfirmed = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Regional consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static CovidData parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new CovidData(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	


    private static List<Regional> arrayOfRegional(System.JSONParser p) {
        List<Regional> res = new List<Regional>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Regional(p));
        }
        return res;
    }


    private static List<Unofficial_summary> arrayOfUnofficial_summary(System.JSONParser p) {
        List<Unofficial_summary> res = new List<Unofficial_summary>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Unofficial_summary(p));
        }
        return res;
    }

}